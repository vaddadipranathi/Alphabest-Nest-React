var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Alphabet.html",[0,0.322,1,0.726]],["body/classes/Alphabet.html",[0,0.401,1,1.275,2,1.465,3,0.539,4,0.447,5,0.447,6,1.777,7,0.642,8,1.734,9,3.976,10,0.447,11,2.5,12,3.308,13,2.893,14,0.878,15,0.063,16,1.067,17,2.385,18,2.25,19,1.451,20,2.25,21,3.976,22,2.5,23,4.465,24,3.167,25,3.664,26,2.25,27,3.167,28,3.167,29,3.167,30,2.25,31,2.25,32,3.167,33,1.046,34,3.664,35,1.465,36,1.465,37,3.167,38,1.777,39,1.232,40,1.232,41,1.232,42,0.539,43,0.039,44,0.039]],["title/controllers/AlphabetController.html",[45,1.182,46,1.392]],["body/controllers/AlphabetController.html",[0,0.215,1,0.992,3,0.406,4,0.337,5,0.337,7,0.484,8,1.409,10,0.337,14,0.617,15,0.063,16,1.325,17,2.56,19,1.557,33,0.888,35,1.104,39,0.928,40,0.928,41,0.928,42,0.406,43,0.032,44,0.032,45,0.788,46,1.902,47,0.788,48,1.339,49,1.695,50,1.695,51,1.196,52,3.767,53,2.743,54,2.743,55,2.743,56,2.743,57,2.032,58,2.032,59,2.574,60,1.695,61,1.557,62,2.032,63,2.574,64,1.695,65,2.574,66,1.695,67,3.324,68,2.574,69,1.695,70,1.339,71,2.574,72,1.695,73,1.409,74,1.409,75,1.409,76,1.339,77,2.574,78,1.695,79,1.339,80,1.695,81,0.484,82,1.695,83,1.232,84,1.339,85,1.695,86,1.695,87,1.339,88,1.339,89,1.339,90,1.695,91,2.153,92,3.105,93,1.695,94,1.695,95,1.695,96,1.695,97,1.695,98,1.695,99,1.695]],["title/modules/AlphabetModule.html",[100,1.392,101,1.182]],["body/modules/AlphabetModule.html",[0,0.34,1,0.767,3,0.644,4,0.533,5,0.533,15,0.062,33,1.309,39,1.47,40,1.47,41,1.47,42,0.644,43,0.044,44,0.044,46,2.199,47,1.661,81,0.767,83,1.766,84,2.12,100,1.956,101,2.131,102,1.248,103,1.661,104,2.12,105,2.12,106,2.326,107,1.748,108,1.748,109,2.685,110,2.821,111,2.12,112,1.47,113,1.248,114,2.12,115,2.12,116,2.685,117,2.12,118,2.685,119,2.685]],["title/injectables/AlphabetService.html",[83,1.007,120,1.182]],["body/injectables/AlphabetService.html",[0,0.115,1,1.213,3,0.218,4,0.18,5,0.18,7,0.687,8,0.85,10,0.18,12,1.226,13,3.451,14,0.86,15,0.063,16,1.358,19,1.314,33,0.841,36,0.591,42,0.218,43,0.019,44,0.019,51,0.722,52,3.422,53,1.899,54,1.899,55,1.899,56,1.899,57,1.226,58,1.226,61,1.568,62,2.325,67,1.226,70,1.226,73,1.317,74,1.317,75,1.317,76,1.226,79,2.734,81,0.259,83,0.953,87,1.226,88,1.226,91,1.723,92,2.734,112,0.497,113,1.463,114,0.717,115,0.717,120,0.722,121,0.591,122,0.717,123,1.552,124,1.552,125,0.908,126,1.899,127,0.908,128,1.552,129,0.908,130,4.548,131,2.945,132,4.202,133,0.908,134,1.552,135,0.908,136,2.325,137,1.552,138,1.552,139,0.908,140,3.317,141,3.883,142,0.908,143,0.908,144,0.908,145,0.908,146,0.908,147,2.033,148,2.033,149,0.908,150,0.908,151,3.317,152,2.405,153,2.325,154,1.552,155,1.552,156,2.405,157,1.552,158,1.552,159,2.405,160,2.405,161,2.405,162,0.908,163,1.899,164,1.552,165,1.552,166,1.552,167,1.552,168,1.552,169,1.552,170,1.552,171,2.033]],["title/controllers/AppController.html",[45,1.182,172,1.392]],["body/controllers/AppController.html",[0,0.386,3,0.73,4,0.604,5,0.604,10,0.604,15,0.062,16,1.307,17,1.983,19,1.206,33,1.107,42,0.73,43,0.048,44,0.048,45,1.803,47,1.416,51,1.803,61,1.206,81,0.869,89,2.405,91,1.667,172,2.124,173,2.405,174,3.548,175,3.045,176,1.69,177,2.405,178,3.045,179,3.045]],["title/modules/AppModule.html",[100,1.392,180,1.392]],["body/modules/AppModule.html",[0,0.302,1,1.078,3,0.571,4,0.473,5,0.473,14,0.571,15,0.062,22,1.881,33,1.263,39,1.304,40,1.304,41,1.304,42,0.571,43,0.041,44,0.041,47,1.531,81,0.68,100,1.804,101,2.057,102,1.107,103,1.531,106,2.145,107,1.55,108,1.55,110,2.601,111,1.881,112,1.304,117,2.601,163,1.881,172,2.068,176,1.752,177,1.881,180,2.531,181,1.881,182,1.881,183,2.382,184,2.382,185,2.382,186,2.382,187,2.382,188,2.382,189,2.382,190,2.382,191,2.382,192,2.382,193,2.382,194,2.382,195,2.382,196,2.382,197,2.382,198,2.382,199,2.382]],["title/injectables/AppService.html",[120,1.182,176,1.007]],["body/injectables/AppService.html",[0,0.408,3,0.772,4,0.639,5,0.639,10,0.639,15,0.061,16,1.355,19,1.276,33,0.92,42,0.772,43,0.049,44,0.049,51,1.868,61,1.276,81,0.92,91,1.764,120,1.868,121,2.097,174,3.622,176,1.592,200,2.544,201,3.222,202,3.222,203,3.222]],["title/classes/Logger.html",[0,0.322,113,1.182]],["body/classes/Logger.html",[0,0.311,2,1.6,3,0.589,4,0.488,5,0.488,7,0.702,8,1.843,10,0.488,14,0.92,15,0.062,16,1.593,19,1.521,33,0.702,42,0.589,43,0.041,44,0.041,51,1.565,61,1.521,73,2.102,74,2.102,75,2.102,81,0.702,113,1.565,204,1.941,205,4.326,206,3.367,207,3.367,208,3.367,209,3.367,210,3.367,211,2.458,212,3.84,213,3.84,214,3.367,215,2.458,216,3.367,217,2.458,218,2.458,219,2.458,220,2.458]],["title/interfaces/SwaggerConfig.html",[221,1.392,222,1.392]],["body/interfaces/SwaggerConfig.html",[3,0.716,4,0.593,5,0.593,7,1.274,10,0.593,11,3.024,14,1.069,15,0.06,16,1.689,42,0.716,43,0.047,44,0.047,221,1.635,222,2.097,223,2.986,224,2.358,225,3.523,226,3.523,227,3.523]],["title/coverage.html",[228,2.243]],["body/coverage.html",[0,0.458,1,0.78,5,0.542,6,2.158,14,0.655,15,0.061,43,0.044,44,0.044,45,1.681,46,1.496,48,2.158,83,1.082,113,1.27,120,1.681,122,2.158,153,2.158,172,1.496,173,2.158,176,1.082,200,2.158,204,2.158,221,1.496,222,1.496,224,2.158,228,1.779,229,2.733,230,2.733,231,2.733,232,4.608,233,3.615,234,2.733,235,2.733,236,2.158,237,2.733,238,2.158,239,4.052,240,2.733,241,2.158,242,3.615,243,2.158,244,2.733,245,2.733,246,2.158,247,2.158,248,2.733,249,2.733,250,2.733,251,2.733,252,2.733,253,2.733]],["title/dependencies.html",[103,1.419,254,2.136]],["body/dependencies.html",[0,0.394,15,0.062,35,2.023,36,2.023,38,2.453,43,0.048,44,0.048,81,0.887,103,1.444,112,1.701,255,4.309,256,3.107,257,3.107,258,3.929,259,3.107,260,3.107,261,3.107,262,3.107,263,3.107,264,3.107,265,3.107,266,3.107,267,3.107,268,3.107,269,3.107,270,3.107,271,3.107,272,3.107,273,3.107,274,3.107]],["title/miscellaneous/functions.html",[275,1.17,276,2.41]],["body/miscellaneous/functions.html",[7,0.94,10,0.653,14,0.976,15,0.057,43,0.05,44,0.05,61,1.303,73,1.802,74,1.802,75,1.802,136,2.599,241,2.599,243,3.216,246,2.599,247,3.492,275,1.802,276,2.599,277,3.291,278,3.291,279,3.291,280,4.423,281,2.142,282,3.291,283,4.073,284,3.291]],["title/index.html",[10,0.424,285,2.136,286,2.136]],["body/index.html",[4,0.492,7,0.708,15,0.061,43,0.042,44,0.042,126,1.957,228,1.613,281,1.613,287,2.478,288,2.478,289,3.385,290,2.478,291,2.478,292,2.478,293,2.478,294,2.478,295,2.478,296,3.856,297,2.478,298,2.478,299,2.478,300,4.584,301,2.478,302,2.478,303,4.479,304,2.478,305,2.478,306,3.385,307,2.478,308,2.478,309,2.478,310,2.478,311,3.385,312,3.385,313,2.478,314,2.478,315,2.478,316,3.385,317,3.385,318,2.478,319,1.957,320,2.478,321,2.478,322,2.478,323,1.957,324,2.478,325,2.478,326,2.478,327,2.478,328,2.478,329,2.478,330,2.478,331,2.478,332,2.478,333,2.478,334,2.478,335,2.478,336,2.478,337,2.478,338,2.478,339,2.478,340,2.478,341,2.478]],["title/modules.html",[102,1.602]],["body/modules.html",[15,0.054,43,0.054,44,0.054,101,1.714,102,1.714,180,2.019,323,3.445,342,4.363,343,4.363,344,4.363]],["title/overview.html",[345,2.721]],["body/overview.html",[2,2.033,15,0.058,43,0.048,44,0.048,47,1.452,83,1.71,101,2.174,102,1.452,103,1.832,104,2.466,105,2.466,106,2.566,107,2.033,108,2.033,121,2.033,176,1.71,180,2.615,181,2.466,182,2.466,221,1.71,345,2.466,346,4.536,347,3.123]],["title/miscellaneous/variables.html",[275,1.17,348,2.41]],["body/miscellaneous/variables.html",[1,1.182,7,0.966,10,0.671,14,0.811,15,0.06,43,0.051,44,0.051,222,1.852,225,2.67,226,2.67,227,2.67,236,2.67,238,3.27,275,1.852,281,2.696,319,2.67,348,2.67,349,3.382,350,3.382,351,3.382,352,3.382,353,3.382]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":232,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":266,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":261,"title":{},"body":{"dependencies.html":{}}}],["0.2.44",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":233,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":347,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1/4",{"_index":235,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":346,"title":{},"body":{"overview.html":{}}}],["2.3.3",{"_index":263,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":234,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":268,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["4.3.0",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["5.2.0",{"_index":259,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":270,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":255,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":260,"title":{},"body":{"dependencies.html":{}}}],["accepts",{"_index":136,"title":{},"body":{"injectables/AlphabetService.html":{},"miscellaneous/functions.html":{}}}],["alpha",{"_index":152,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["alpha.alphabet",{"_index":157,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["alpha.status",{"_index":155,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["alphabet",{"_index":1,"title":{"classes/Alphabet.html":{}},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphabetcontroller",{"_index":46,"title":{"controllers/AlphabetController.html":{}},"body":{"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"coverage.html":{}}}],["alphabetmodule",{"_index":101,"title":{"modules/AlphabetModule.html":{}},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["alphabetrepository",{"_index":128,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["alphabetservice",{"_index":83,"title":{"injectables/AlphabetService.html":{}},"body":{"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"coverage.html":{},"overview.html":{}}}],["alphabetservice,logger",{"_index":119,"title":{},"body":{"modules/AlphabetModule.html":{}}}],["alphabtes.controller",{"_index":116,"title":{},"body":{"modules/AlphabetModule.html":{}}}],["alphabtes.service",{"_index":84,"title":{},"body":{"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{}}}],["amazing",{"_index":324,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":34,"title":{},"body":{"classes/Alphabet.html":{}}}],["apitags",{"_index":82,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["apitags('aplhabet",{"_index":86,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["aplhabet",{"_index":50,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["app",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":177,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":172,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":295,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":180,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":176,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":52,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["author",{"_index":334,"title":{},"body":{"index.html":{}}}],["auto",{"_index":27,"title":{},"body":{"classes/Alphabet.html":{}}}],["await",{"_index":92,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["backers",{"_index":325,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"classes/Alphabet.html":{}}}],["bootstrap",{"_index":247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":344,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":342,"title":{},"body":{"modules.html":{}}}],["building",{"_index":290,"title":{},"body":{"index.html":{}}}],["chelli1",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["class",{"_index":0,"title":{"classes/Alphabet.html":{},"classes/Logger.html":{}},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Alphabet.html":{},"classes/Logger.html":{},"overview.html":{}}}],["cluster_alphabetmodule",{"_index":104,"title":{},"body":{"modules/AlphabetModule.html":{},"overview.html":{}}}],["cluster_alphabetmodule_providers",{"_index":105,"title":{},"body":{"modules/AlphabetModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule_providers",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["column",{"_index":23,"title":{},"body":{"classes/Alphabet.html":{}}}],["column()@apiproperty",{"_index":30,"title":{},"body":{"classes/Alphabet.html":{}}}],["column()@isstring()@apiproperty",{"_index":18,"title":{},"body":{"classes/Alphabet.html":{}}}],["console.error(message",{"_index":219,"title":{},"body":{"classes/Logger.html":{}}}],["console.log(message",{"_index":218,"title":{},"body":{"classes/Logger.html":{}}}],["console.warn(message",{"_index":220,"title":{},"body":{"classes/Logger.html":{}}}],["const",{"_index":151,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["constructor",{"_index":87,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["constructor(alphabetrepository",{"_index":125,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["constructor(private",{"_index":178,"title":{},"body":{"controllers/AppController.html":{}}}],["controller",{"_index":45,"title":{"controllers/AlphabetController.html":{},"controllers/AppController.html":{}},"body":{"controllers/AlphabetController.html":{},"controllers/AppController.html":{},"coverage.html":{}}}],["controller('aplhabet",{"_index":85,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["controllers",{"_index":47,"title":{},"body":{"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["coverage",{"_index":228,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdocument",{"_index":243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["data",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["database",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["datanotfoundexception",{"_index":147,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["datanotupdated",{"_index":148,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"controllers/AppController.html":{}}}],["default",{"_index":350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Logger.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":170,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["development",{"_index":302,"title":{},"body":{"index.html":{}}}],["disable",{"_index":40,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["documentation",{"_index":229,"title":{},"body":{"coverage.html":{}}}],["e2e",{"_index":313,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":291,"title":{},"body":{"index.html":{}}}],["entities",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":9,"title":{},"body":{"classes/Alphabet.html":{}}}],["entitys/alphabets.entity",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":207,"title":{},"body":{"classes/Logger.html":{}}}],["error(message",{"_index":210,"title":{},"body":{"classes/Logger.html":{}}}],["eslint",{"_index":39,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["execute",{"_index":168,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["export",{"_index":42,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{}}}],["express",{"_index":258,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":163,"title":{},"body":{"injectables/AlphabetService.html":{},"modules/AppModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["found",{"_index":131,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["framework",{"_index":289,"title":{},"body":{"index.html":{}}}],["function",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":276,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":21,"title":{},"body":{"classes/Alphabet.html":{}}}],["get('/getallalphabestofone",{"_index":59,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["get('/getallalphabestofzero",{"_index":63,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["getallalphabestofone",{"_index":53,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["getallalphabestofzero",{"_index":54,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["getconnection",{"_index":146,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["getconnection().createquerybuilder",{"_index":164,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["gethello",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gets",{"_index":140,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["gettaskbyid",{"_index":124,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["gettaskbyid(alphabet",{"_index":134,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["getting",{"_index":285,"title":{"index.html":{}},"body":{}}],["grow",{"_index":320,"title":{},"body":{"index.html":{}}}],["hello",{"_index":202,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":331,"title":{},"body":{"index.html":{}}}],["host",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":338,"title":{},"body":{"index.html":{}}}],["id",{"_index":12,"title":{},"body":{"classes/Alphabet.html":{},"injectables/AlphabetService.html":{}}}],["identifier",{"_index":230,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":206,"title":{},"body":{"classes/Logger.html":{}}}],["import",{"_index":33,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["incremental",{"_index":28,"title":{},"body":{"classes/Alphabet.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{}}}],["injectable",{"_index":120,"title":{"injectables/AlphabetService.html":{},"injectables/AppService.html":{}},"body":{"injectables/AlphabetService.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["injectables",{"_index":121,"title":{},"body":{"injectables/AlphabetService.html":{},"injectables/AppService.html":{},"overview.html":{}}}],["injectrepository",{"_index":145,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["injectrepository(alphabet",{"_index":150,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["installation",{"_index":299,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":301,"title":{},"body":{"index.html":{}}}],["interface",{"_index":221,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":223,"title":{},"body":{"interfaces/SwaggerConfig.html":{}}}],["isactive",{"_index":32,"title":{},"body":{"classes/Alphabet.html":{}}}],["isstring",{"_index":37,"title":{},"body":{"classes/Alphabet.html":{}}}],["join",{"_index":327,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":335,"title":{},"body":{"index.html":{}}}],["license",{"_index":341,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":317,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":208,"title":{},"body":{"classes/Logger.html":{}}}],["log(message",{"_index":214,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":113,"title":{"classes/Logger.html":{}},"body":{"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{},"coverage.html":{}}}],["loggerservice",{"_index":205,"title":{},"body":{"classes/Logger.html":{}}}],["matching",{"_index":44,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":212,"title":{},"body":{"classes/Logger.html":{}}}],["metadata",{"_index":265,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":51,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Logger.html":{}}}],["miscellaneous",{"_index":275,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":316,"title":{},"body":{"index.html":{}}}],["mode",{"_index":306,"title":{},"body":{"index.html":{}}}],["module",{"_index":100,"title":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{}},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/alphabtes/alphabtes.module",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":330,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":262,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":336,"title":{},"body":{"index.html":{}}}],["name",{"_index":74,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":296,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":340,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":81,"title":{},"body":{"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":256,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":257,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":35,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":112,"title":{},"body":{"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":153,"title":{},"body":{"injectables/AlphabetService.html":{},"coverage.html":{}}}],["node.js",{"_index":288,"title":{},"body":{"index.html":{}}}],["npm",{"_index":300,"title":{},"body":{"index.html":{}}}],["number",{"_index":24,"title":{},"body":{"classes/Alphabet.html":{}}}],["object",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["open",{"_index":318,"title":{},"body":{"index.html":{}}}],["openapiobject",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":75,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":108,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":345,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":254,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":79,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["parameters",{"_index":73,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{},"miscellaneous/functions.html":{}}}],["password",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":328,"title":{},"body":{"index.html":{}}}],["port",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":49,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["prettier/prettier",{"_index":41,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":25,"title":{},"body":{"classes/Alphabet.html":{}}}],["private",{"_index":88,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["production",{"_index":308,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":287,"title":{},"body":{"index.html":{}}}],["project",{"_index":319,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":67,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/Alphabet.html":{},"interfaces/SwaggerConfig.html":{}}}],["providers",{"_index":110,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["put",{"_index":80,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["put('alltoone",{"_index":65,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["put('alltozero",{"_index":68,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["put('alphatoone/:alphabet",{"_index":71,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["put('alphatozero/:alphabet",{"_index":77,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["read",{"_index":329,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":89,"title":{},"body":{"controllers/AlphabetController.html":{},"controllers/AppController.html":{}}}],["reflect",{"_index":264,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":126,"title":{},"body":{"injectables/AlphabetService.html":{},"index.html":{}}}],["reset",{"_index":107,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["result",{"_index":130,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["results",{"_index":43,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrived",{"_index":171,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["return",{"_index":91,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":267,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":303,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":269,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":292,"title":{},"body":{"index.html":{}}}],["server",{"_index":293,"title":{},"body":{"index.html":{}}}],["service",{"_index":123,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["set",{"_index":166,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["side",{"_index":294,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"index.html":{}}}],["sponsors",{"_index":322,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.config.ts",{"_index":349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":173,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":175,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":201,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/exception/customexception.exception",{"_index":149,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/config/logger/logger.service",{"_index":114,"title":{},"body":{"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{}}}],["src/config/logger/logger.service.ts",{"_index":204,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/config/logger/logger.service.ts:11",{"_index":211,"title":{},"body":{"classes/Logger.html":{}}}],["src/config/logger/logger.service.ts:14",{"_index":217,"title":{},"body":{"classes/Logger.html":{}}}],["src/config/logger/logger.service.ts:8",{"_index":215,"title":{},"body":{"classes/Logger.html":{}}}],["src/config/swagger/swagger.config.ts",{"_index":236,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger/swagger.interface.ts",{"_index":224,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/config/swagger/swagger.ts",{"_index":241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/entitys/alphabets.entity",{"_index":115,"title":{},"body":{"modules/AlphabetModule.html":{},"injectables/AlphabetService.html":{}}}],["src/entitys/alphabets.entity.ts",{"_index":6,"title":{},"body":{"classes/Alphabet.html":{},"coverage.html":{}}}],["src/entitys/alphabets.entity.ts:18",{"_index":26,"title":{},"body":{"classes/Alphabet.html":{}}}],["src/entitys/alphabets.entity.ts:26",{"_index":20,"title":{},"body":{"classes/Alphabet.html":{}}}],["src/entitys/alphabets.entity.ts:34",{"_index":31,"title":{},"body":{"classes/Alphabet.html":{}}}],["src/main.ts",{"_index":246,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts",{"_index":48,"title":{},"body":{"controllers/AlphabetController.html":{},"coverage.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:17",{"_index":72,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:22",{"_index":78,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:27",{"_index":66,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:32",{"_index":69,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:37",{"_index":60,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.controller.ts:42",{"_index":64,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["src/modules/alphabtes/alphabtes.module.ts",{"_index":109,"title":{},"body":{"modules/AlphabetModule.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts",{"_index":122,"title":{},"body":{"injectables/AlphabetService.html":{},"coverage.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:115",{"_index":129,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:12",{"_index":127,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:24",{"_index":143,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:44",{"_index":135,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:55",{"_index":144,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:74",{"_index":139,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:86",{"_index":142,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["src/modules/alphabtes/alphabtes.service.ts:98",{"_index":133,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["start",{"_index":304,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":307,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":309,"title":{},"body":{"index.html":{}}}],["started",{"_index":286,"title":{"index.html":{}},"body":{}}],["starter",{"_index":298,"title":{},"body":{"index.html":{}}}],["starting",{"_index":8,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"classes/Logger.html":{}}}],["statements",{"_index":231,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":13,"title":{},"body":{"classes/Alphabet.html":{},"injectables/AlphabetService.html":{}}}],["stay",{"_index":332,"title":{},"body":{"index.html":{}}}],["string",{"_index":16,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{}}}],["succesfully",{"_index":132,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["sucessfuly",{"_index":138,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["support",{"_index":323,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":343,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["swagger_config",{"_index":238,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":222,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":225,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["task",{"_index":137,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["test",{"_index":312,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":315,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":314,"title":{},"body":{"index.html":{}}}],["tests",{"_index":311,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":321,"title":{},"body":{"index.html":{}}}],["this.alphabetrepository.find",{"_index":169,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["this.alphabetrepository.findone",{"_index":162,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["this.alphabetrepository.update(id",{"_index":158,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["this.alphabetservice.getallalphabestofone",{"_index":98,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.alphabetservice.getallalphabestofzero",{"_index":99,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.alphabetservice.updatealltoone",{"_index":96,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.alphabetservice.updatealltozero",{"_index":97,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.alphabetservice.updatestatustoone(alphabet",{"_index":93,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.alphabetservice.updatestatustozero(alphabet",{"_index":95,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["this.appservice.gethello",{"_index":179,"title":{},"body":{"controllers/AppController.html":{}}}],["this.gettaskbyid(alphabet",{"_index":154,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["this.logger.error('task",{"_index":160,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["this.logger.log('task",{"_index":159,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["throw",{"_index":161,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["title",{"_index":226,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":333,"title":{},"body":{"index.html":{}}}],["true",{"_index":156,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["twitter",{"_index":339,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/Alphabet.html":{},"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{},"modules/AppModule.html":{},"classes/Logger.html":{},"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":36,"title":{},"body":{"classes/Alphabet.html":{},"injectables/AlphabetService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":111,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{}}}],["typeormmodule.forfeature([alphabet",{"_index":118,"title":{},"body":{"modules/AlphabetModule.html":{}}}],["typeormmodule.forroot",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":297,"title":{},"body":{"index.html":{}}}],["ui",{"_index":272,"title":{},"body":{"dependencies.html":{}}}],["unit",{"_index":310,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":62,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["update(alphabet",{"_index":165,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["updatealltoone",{"_index":55,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["updatealltozero",{"_index":56,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["updated",{"_index":141,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["updatestatustoone",{"_index":57,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["updatestatustoone(@param('alphabet",{"_index":90,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["updatestatustoone(alphabet",{"_index":70,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["updatestatustozero",{"_index":58,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["updatestatustozero(@param('alphabet",{"_index":94,"title":{},"body":{"controllers/AlphabetController.html":{}}}],["updatestatustozero(alphabet",{"_index":76,"title":{},"body":{"controllers/AlphabetController.html":{},"injectables/AlphabetService.html":{}}}],["username",{"_index":22,"title":{},"body":{"classes/Alphabet.html":{},"modules/AppModule.html":{}}}],["validator",{"_index":38,"title":{},"body":{"classes/Alphabet.html":{},"dependencies.html":{}}}],["value",{"_index":351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":237,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":348,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":227,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":213,"title":{},"body":{"classes/Logger.html":{}}}],["warn",{"_index":209,"title":{},"body":{"classes/Logger.html":{}}}],["warn(message",{"_index":216,"title":{},"body":{"classes/Logger.html":{}}}],["watch",{"_index":305,"title":{},"body":{"index.html":{}}}],["website",{"_index":337,"title":{},"body":{"index.html":{}}}],["where(\"status",{"_index":167,"title":{},"body":{"injectables/AlphabetService.html":{}}}],["world",{"_index":203,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":326,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":106,"title":{},"body":{"modules/AlphabetModule.html":{},"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Alphabet.html":{"url":"classes/Alphabet.html","title":"class - Alphabet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Alphabet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entitys/alphabets.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                starting of Alphabet Entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alphabet\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alphabet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entitys/alphabets.entity.ts:26\n                        \n                    \n\n            \n                \n                    generates UserName column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entitys/alphabets.entity.ts:18\n                        \n                    \n\n            \n                \n                    auto incremental id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entitys/alphabets.entity.ts:34\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\nimport { IsString } from \"class-validator\";\n\n/* eslint-disable prettier/prettier */\n\n/**\n * starting of Alphabet Entity\n */\n@Entity()\nexport class Alphabet {\n\n    /**\n     * auto incremental id\n     */\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /**\n     * generates UserName column\n     */\n    @Column()\n    @IsString()\n    @ApiProperty()\n    alphabet: string;\n\n\n    /**\n     * generates isActive column\n     */\n    @Column()\n    @ApiProperty()\n    status: boolean;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AlphabetController.html":{"url":"controllers/AlphabetController.html","title":"controller - AlphabetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AlphabetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/alphabtes/alphabtes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                aplhabet\n            \n\n\n            \n                Description\n            \n            \n                Starting of AlphabetController\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllAlphabestOfOne\n                            \n                            \n                                    Async\n                                getAllAlphabestOfZero\n                            \n                            \n                                    Async\n                                updateAllToOne\n                            \n                            \n                                    Async\n                                updateAllToZero\n                            \n                            \n                                    Async\n                                updateStatusToOne\n                            \n                            \n                                    Async\n                                updateStatusToZero\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllAlphabestOfOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAlphabestOfOne()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getAllAlphabestOfOne')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllAlphabestOfZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAlphabestOfZero()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getAllAlphabestOfZero')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAllToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllToOne()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('allToOne')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAllToZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllToZero()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('allToZero')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateStatusToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStatusToOne(alphabet: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('alphaToOne/:alphabet')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alphabet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateStatusToZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStatusToZero(alphabet: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('alphaToZero/:alphabet')\n                \n            \n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    alphabet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Param, Put } from \"@nestjs/common\";\nimport { ApiTags } from \"@nestjs/swagger\";\nimport { AlphabetService } from \"./alphabtes.service\";\n\n/**\n * Starting of AlphabetController \n */\n@Controller('aplhabet')\n@ApiTags('aplhabet')\nexport class AlphabetController {\n     constructor(\n          private readonly alphabetService: AlphabetService,\n     ) { }\n\n     @Put('alphaToOne/:alphabet')\n     async updateStatusToOne(@Param('alphabet') alphabet: string): Promise {\n          return await this.alphabetService.updateStatusToOne(alphabet);\n     }\n\n     @Put('alphaToZero/:alphabet')\n     async updateStatusToZero(@Param('alphabet') alphabet: string): Promise {\n          return await this.alphabetService.updateStatusToZero(alphabet);\n     }\n\n     @Put('allToOne')\n     async updateAllToOne(): Promise {\n          return await this.alphabetService.updateAllToOne();\n     }\n\n     @Put('allToZero')\n     async updateAllToZero(): Promise {\n          return await this.alphabetService.updateAllToZero();\n     }\n\n     @Get('/getAllAlphabestOfOne')\n     async getAllAlphabestOfOne() {\n          return await this.alphabetService.getAllAlphabestOfOne();\n     }\n\n     @Get('/getAllAlphabestOfZero')\n     async getAllAlphabestOfZero() {\n          return await this.alphabetService.getAllAlphabestOfZero();\n     }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlphabetModule.html":{"url":"modules/AlphabetModule.html","title":"module - AlphabetModule","body":"\n                   \n\n\n\n\n    Modules\n    AlphabetModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AlphabetModule\n\n\n\ncluster_AlphabetModule_providers\n\n\n\n\nAlphabetService\n\nAlphabetService\n\n\n\nAlphabetModule\n\nAlphabetModule\n\nAlphabetModule -->\n\nAlphabetService->AlphabetModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/alphabtes/alphabtes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlphabetService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlphabetController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Logger } from 'src/config/logger/logger.service';\nimport { Alphabet } from 'src/entitys/alphabets.entity';\nimport { AlphabetController } from './alphabtes.controller';\nimport { AlphabetService } from './alphabtes.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Alphabet])],\n  providers: [AlphabetService,Logger],\n  controllers: [AlphabetController]\n\n})\nexport class AlphabetModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlphabetService.html":{"url":"injectables/AlphabetService.html","title":"injectable - AlphabetService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AlphabetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/alphabtes/alphabtes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Starting of AlphabetService service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllAlphabestOfOne\n                            \n                            \n                                    Async\n                                getAllAlphabestOfZero\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                updateAllToOne\n                            \n                            \n                                    Async\n                                updateAllToZero\n                            \n                            \n                                    Async\n                                updateStatusToOne\n                            \n                            \n                                    Async\n                                updateStatusToZero\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(alphabetRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/alphabtes/alphabtes.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alphabetRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllAlphabestOfOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAlphabestOfOne()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if result found succesfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllAlphabestOfZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAlphabestOfZero()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if result found succesfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTaskById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(alphabet: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    alphabet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        accepts param  alphabet of type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        if task found sucessfuly\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAllToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllToOne()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if status gets updated succesfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAllToZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAllToZero()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if status gets updated succesfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateStatusToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStatusToOne(alphabet: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    alphabet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        accepts param  alphabet of type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if status gets updated succesfully\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateStatusToZero\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStatusToZero(alphabet: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/alphabtes/alphabtes.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    alphabet\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        accepts param  alphabet of type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        result if status gets updated succesfully\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Alphabet } from 'src/entitys/alphabets.entity';\nimport { getConnection, Repository } from 'typeorm';\nimport { Logger } from 'src/config/logger/logger.service';\nimport { DataNotFoundException, DataNotUpdated } from 'src/common/exception/customException.exception';\n/**\n * Starting of AlphabetService service\n */\n@Injectable()\nexport class AlphabetService {\n   constructor(\n      @InjectRepository(Alphabet)\n      private alphabetRepository: Repository,\n      private logger: Logger,\n   ) { }\n\n   /**\n    * \n    * @param alphabet accepts param  alphabet of type string\n    * @returns result if status gets updated succesfully\n    */\n   async updateStatusToOne(alphabet: string) {\n      const alpha = new Alphabet();\n      const id = await this.getTaskById(alphabet)\n      alpha.status = true;\n      alpha.alphabet = alphabet;\n      const result = await this.alphabetRepository.update(id, alpha);\n      if (result) {\n         this.logger.log('task status got updated succesfully');\n         return result;\n      } else {\n         this.logger.error('task status not got updated succesfully');\n         throw new DataNotUpdated();\n      }\n   }\n\n   /**\n    * \n    * @param alphabet accepts param  alphabet of type string\n    * @returns if task found sucessfuly\n    */\n   async getTaskById(alphabet: string): Promise {\n      return await this.alphabetRepository.findOne({\n         alphabet: alphabet,\n      })\n   }\n\n   /**\n    * \n    * @param alphabet accepts param  alphabet of type string\n    * @returns result if status gets updated succesfully\n    */\n   async updateStatusToZero(alphabet: string) {\n      const alpha = new Alphabet();\n      const id = await this.getTaskById(alphabet)\n      alpha.status = false;\n      alpha.alphabet = alphabet;\n      const result = await this.alphabetRepository.update(id, alpha);\n      if (result) {\n         this.logger.log('task status got updated succesfully');\n         return result;\n      } else {\n         this.logger.error('task status not got updated succesfully');\n         throw new DataNotUpdated();\n      }\n   }\n\n   /**\n    * \n    * @returns result if status gets updated succesfully\n    */\n   async updateAllToOne() {\n      return await getConnection().createQueryBuilder()\n         .update(Alphabet)\n         .set({ status: true, })\n         .where(\"status = :status\", { status: false })\n         .execute();\n   }\n\n   /**\n    * \n    * @returns result if status gets updated succesfully\n    */\n   async updateAllToZero() {\n      return await getConnection().createQueryBuilder()\n         .update(Alphabet)\n         .set({ status: false, })\n         .where(\"status = :status\", { status: true })\n         .execute();\n   }\n\n   /**\n    * \n    * @returns result if result found succesfully\n    */\n   async getAllAlphabestOfZero() {\n      const result = await this.alphabetRepository.find({\n         status: false\n      })\n      if (result) {\n         this.logger.log('task details got retrived succesfully');\n         return result;\n      } else {\n         this.logger.error('task details not retrived ');\n         throw new DataNotFoundException();\n      }\n   }\n\n   /**\n   * \n   * @returns result if result found succesfully\n   */\n   async getAllAlphabestOfOne() {\n      const result = await this.alphabetRepository.find({\n         status: true\n      })\n      if (result) {\n         this.logger.log('task status got updated succesfully');\n         return result;\n      } else {\n         this.logger.error('task status not got retrived ');\n         throw new DataNotFoundException();\n      }\n   }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAlphabetModule\n\nAlphabetModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAlphabetModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AlphabetModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { Alphabet } from './entitys/alphabets.entity';\nimport { AlphabetModule } from './modules/alphabtes/alphabtes.module';\n\n@Module({\n  imports: [\nTypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'root',\n      password: 'Chelli1@',\n      database: 'alphabet',\n      entities: [Alphabet],\n      synchronize: false,\n    }),\n    AlphabetModule\n  ],\n \n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/logger/logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Starting of LoggerService\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/logger/logger.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/logger/logger.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from '@nestjs/common';\n\n/**\n * Starting of LoggerService\n */\nexport class Logger implements LoggerService {\n  log(message: string) {\n    console.log(message);\n  }\n  error(message: string) {\n    console.error(message);\n  }\n  warn(message: string) {\n    console.warn(message);\n  }\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/logger/logger.service.ts\n            \n            class\n            Logger\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/config/swagger/swagger.config.ts\n            \n            variable\n            SWAGGER_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger/swagger.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/swagger/swagger.ts\n            \n            function\n            createDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entitys/alphabets.entity.ts\n            \n            class\n            Alphabet\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/alphabtes/alphabtes.controller.ts\n            \n            controller\n            AlphabetController\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/modules/alphabtes/alphabtes.service.ts\n            \n            injectable\n            AlphabetService\n            \n                11 %\n                (1/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.44\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createDocument   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/config/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        accepts data of type INestApplication\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        an OpenAPIObject object\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AlphabetModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AlphabetModule\n\n\n\ncluster_AlphabetModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAlphabetService\n\nAlphabetService\n\n\n\nAlphabetModule\n\nAlphabetModule\n\nAlphabetModule -->\n\nAlphabetService->AlphabetModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAlphabetModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SWAGGER_CONFIG   (src/.../swagger.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/swagger/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SwaggerConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  title: 'Alphabet App',\n  description: 'this a nestjs project',\n  version: '1.0',\n  tags: ['Alphabet App'],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
